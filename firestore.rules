service cloud.firestore {
  function isRequestResourceAuthor() {
    return request.auth.uid == request.resource.data.authorUid
      && request.auth.token.name == request.resource.data.authorName
      && request.auth.token.username = request.resource.data.username;
  }
  function isResourceAuthor() {
    return request.auth.uid == resource.data.authorUid;
  }
  function isValidNewAuthorableDocument() {
      return request.resource.data.keys().hasAll(['authorUid', 'authorName', 'authorUsername', 'authorPhotoURL', 'dateOfCreation'])
        && request.resource.data.authorUid is string
        && request.resource.data.authorName is string
        && request.resource.data.authorUsername is string
        && request.resource.data.authorPhotoURL is string
    }
  match /databases/{database}/documents {
    match /posts/{id} {
      function isValidNewPostDocument() {
        return isValidNewAuthorableDocument()
          && request.resource.data.keys().hasAll(['dateOfLastActivity', 'title', 'content', 'numberOfComments', 'numberOfLikes'])
          && request.resource.data.title is string
          && request.resource.data.numberOfComments == 0
          && request.resource.data.numberOfLikes == 0;
      }
      allow read;
      allow create: if isRequestResourceAuthor() && isValidNewPostDocument();
    }
    match /comments/{id} {
      function isValidNewCommentDocument() {
        return isValidNewAuthorableDocument()
          && request.resource.data.keys().hasAll(['content', 'numberOfLikes', 'postId'])
          && request.resource.data.numberOfLikes == 0;        
      }
      allow read;
      allow create: if isRequestResourceAuthor() && isValidNewCommentDocument();
    }
    match /likes/{id} {
      function isValidNewLike() {
        return isValidNewAuthorableDocument()
          && request.resource.data.keys().hasAll(['documentRef', 'documentType'])
          && request.resource.data.documentRef is path
          && request.resource.data.documentType in ['Post', 'Comment']
      }
      allow read;
      allow create: if isRequestResourceAuthor() && isValidNewLike();
      allow delete: if isResourceAuthor();
    }
    match /userMetas/{id} {
      allow read: if (id == request.auth.uid)
      allow update: if (request.writeFields.size() == 1) && ('pushNotifications' in request.writeFields)
    }
    match /publicUserInfos/{userName} {
      allow read;
    }
  }
}
